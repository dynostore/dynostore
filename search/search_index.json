{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#dynostore","title":"DynoStore","text":"<p>DynoStore is a content delivery network that facilitates the connection of multiple storage infraestructures to create a data fabric. At the core of DynoStore entities called data containers orchestrate the storage and movement of data through multiple sites. These containers include generic interfaces to interconnect sites implementing different storage systems (e.g., Amazon S3, Ceph, or Lustre).</p> <p>DynoStore components are divided on client and server components. Server components are microservices deployed to manage the metadata of contents and  user authentication. Whereas, client components include functions to push and pull data.</p>"},{"location":"#services-installation-using-docker-recommended","title":"Services installation using Docker (recommended)","text":"<p>DynoStore architechtures follows a microservice design, which includes the following components declared in the <code>docker-compose.yml</code>: </p> <ul> <li><code>apigateway</code>: serves as interface for clients and applications pushing and pulling data using DynoStore. </li> <li><code>auth</code>: for user registration and authentication.</li> <li><code>frontend</code>: GUI to navigate through uploaded data.</li> <li><code>pub_sub</code>: to manage the sharing of data based on a publication/subscription service.</li> <li><code>metadata</code>: to manage the metadata.</li> <li><code>datacontainer1, datacontainer2, datacontainer3, datacontainer4, datacontainer5</code>: data containers to store data.</li> </ul> <pre><code>docker compose up -d\n</code></pre> <p>For a further description of how to deploy these backend services, please refer to Backend installation</p>"},{"location":"#client-instalation-and-usage","title":"Client instalation and usage","text":"<p>ProxyStore can be accessed through a Python client. This client implement evict, exists, get, and put functions. </p> <pre><code>from dynostore.client import Client\n\ntoken_user = \"&lt;&lt;token-user-0&gt;&gt;\"\ncatalog = \"catalog-0\"\ndata = b\"Hello, World!\"\n\n\nclient = Client(\"&lt;&lt;API_GATEWAY_IP&gt;&gt;\")\n\nclient.put(\n    data = data,\n    token_user = token_user,\n    catalog = catalog\n)\n\nreceived_data = client.get(\n    key = key,\n    token_user = token_user\n)\n</code></pre>"},{"location":"#dynostore-connector-for-proxystore","title":"DynoStore connector for ProxyStore","text":"<p>We implemented a DynoStore connector that can be used with ProxyStore for the transparent management of Python objects as proxies. Getting starte with DynoStore connector requires a few lines of Python code:</p> <pre><code>from proxystore.proxy import Proxy\nfrom proxystore.store import Store\nfrom proxystore.connectors.cdn import DynoConnector\n\n# Create a DynoStore connector \nconnector = DynoConnector(apigateway=\"&lt;&lt;API_GATEWAY_IP&gt;&gt;\", token_user=\"&lt;&lt;token-user-0&gt;&gt;\", catalog=\"proxystore\")\nstore = Store('my-store', connector)\n\ndata = 3\n\n# Store the object and get a proxy\nproxy = store.proxy(data)\n\n# Work on the proxy which behavies like the original object\ndata = proxy ** 2\n</code></pre> <p>Check out ProxyStore documentation to learn more!</p>"},{"location":"installation/","title":"Backend installation","text":"<p>We recommend install the DynoStore backend using Docker. Docker containers provide an agile deployment over multiple operating systems and platforms. To install Docker on your computer, please refer to their official documentation.</p>"},{"location":"installation/#prebuild-docker-images","title":"Prebuild Docker images \ud83d\udc0b","text":"<p>Prebuilt docker images are the easiest way to start using DynoStore locally. They are available on Docker Hub:</p> <ul> <li>dynostore/apigateway:python</li> <li>dynostore/metadata:v2</li> <li>dynostore/pubsub:v1</li> <li>dynostore/auth:v1</li> <li>dynostore/datacontainer:v1</li> </ul> <p>Aditionally, there are available the database containers with the SQL scheme pre-loaded.</p> <ul> <li>dynostore/databaseauth:v1</li> <li>dynostore/dbpubsub:v1</li> </ul>"},{"location":"installation/#build-docker-images","title":"Build Docker images","text":"<p>Alternatively, you can build your own images by executing the following command:</p> <pre><code>docker compose build\n</code></pre>"},{"location":"installation/#quick-installation-guide","title":"Quick installation guide","text":"<ul> <li> <p>Clone DynoStore source code from the GitHub repository. <pre><code>git clone https://github.com/dynostore/dynostore\ncd dynostore\n</code></pre></p> </li> <li> <p>Deploy Docker containers on your machine. It will take some time to download the latest DynoStore release and its related services from DockerHub and create containers.</p> </li> </ul> <pre><code>docker compose up -d\n</code></pre> <ul> <li>Complete the deployment of the <code>APIGateway</code> and <code>metadata</code> services by migrating their databases using the following command:</li> </ul> <pre><code>bash configure_services.sh\n</code></pre>"},{"location":"installation/#creating-an-admin-account","title":"Creating an admin account","text":"<p>You can register a user but by default, it will not have rights even to view and manage data containers. Thus you should create an admin user. Please use the command below:</p> <pre><code>docker exec -it db_auth bash -ic 'python3 configure/create_admin.py'\n</code></pre> <p>You can modify the admin credentials by changing the environment variables of the <code>db_auth</code> container in the <code>docker-compose.yml</code> file:</p> <pre><code>db_auth: #Authentication database\n    image: dynostore/databaseauth:muyal\n    build: \n      context: ./auth\n      dockerfile: DB.Dockerfile\n    expose:\n      - \"5432\"\n    environment:\n      POSTGRES_DB: auth\n      POSTGRES_USER: muyalmanager\n      POSTGRES_PASSWORD: niCi7unamltrubrlJusp\n      ADMIN_USER: dynoadmin # (1)\n      ADMIN_PASSWORD: XeN5raSsdJkcOMN\n      ADMIN_EMAIL: admin@admin\n    volumes:\n      - psql-auth:/var/lib/postgresql/data\n      - ./auth/schema-sql/auth.sql:/docker-entrypoint-initdb.d/auth.sql\n      - ./auth/configure:/configure\n    restart: always\n</code></pre> <ol> <li>Admin credentials.</li> </ol>"},{"location":"installation/#deploying-a-data-container","title":"Deploying a data container","text":"<p>Data containers are abstractions used in DynoStore to manage as code the available storage infraestructure. A data container includes interfaces to enable the <code>get</code> and <code>put</code> of data. In the quick installation of DynoStore, the file <code>docker-compose.yml</code> already includes five datacontainers ready to use. </p> <p>Create a new data container adding the following lines to the <code>docker-compose.yml</code> file:</p> <pre><code>storage6:\n    image: dynostore/datacontainer\n    ports:\n        - \"20011:80\" # (1)\n    volumes: # (2)\n        - ./storage/storage6/data:/data\n        - ./storage/storage6/abekeys:/var/www/html/abekeys\n    environment:  # (3)\n        AUTH_HOST: auth\n</code></pre> <ol> <li>The port <code>20011</code> must be opened. This is port used by the container to receive requests.</li> <li>Volumes between the host and the container to share data and keys.</li> <li>Environment variables to left the container access to the authentication services.</li> </ol> <p>Save the <code>docker-compose.yml</code> and deploy the changes with:</p> <pre><code>docker compose up -d\n</code></pre>"},{"location":"installation/#registering-a-data-container","title":"Registering a data container","text":"<p>A data container must be registered  on DynoStore to let the metadata server know it is available. This is performed by executing the following command:</p> <pre><code>docker compose exec storage6 bash regist_container.sh tokenuser memory storage\n</code></pre> <p>The <code>tokenuser</code> parameter refers to a key assigned to the administrator of the system to add and remove data containers from DynoStore. To get your tokens, please refer to Creating an admin account.</p>"}]}